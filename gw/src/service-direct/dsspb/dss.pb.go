// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dss.proto

/*
Package bitstore is a generated protocol buffer package.

It is generated from these files:
	dss.proto

It has these top-level messages:
	PutRequest
	PutResponse
	GetRequest
	GetResponse2
*/
package bitstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// put object
type PutRequest struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Length uint64 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PutRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *PutRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PutResponse struct {
	Errcode int32 `protobuf:"zigzag32,1,opt,name=errcode" json:"errcode,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutResponse) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

// get object
type GetRequest struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Length uint64 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type GetResponse2 struct {
	Errcode int32  `protobuf:"zigzag32,1,opt,name=errcode" json:"errcode,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetResponse2) Reset()                    { *m = GetResponse2{} }
func (m *GetResponse2) String() string            { return proto.CompactTextString(m) }
func (*GetResponse2) ProtoMessage()               {}
func (*GetResponse2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResponse2) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *GetResponse2) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PutRequest)(nil), "bitstore.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "bitstore.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "bitstore.GetRequest")
	proto.RegisterType((*GetResponse2)(nil), "bitstore.GetResponse2")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BitStore service-direct

type BitStoreClient interface {
	Put(ctx context.Context, opts ...grpc.CallOption) (BitStore_PutClient, error)
	Get(ctx context.Context, opts ...grpc.CallOption) (BitStore_GetClient, error)
}

type bitStoreClient struct {
	cc *grpc.ClientConn
}

func NewBitStoreClient(cc *grpc.ClientConn) BitStoreClient {
	return &bitStoreClient{cc}
}

func (c *bitStoreClient) Put(ctx context.Context, opts ...grpc.CallOption) (BitStore_PutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BitStore_serviceDesc.Streams[0], c.cc, "/bitstore.BitStore/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitStorePutClient{stream}
	return x, nil
}

type BitStore_PutClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutResponse, error)
	grpc.ClientStream
}

type bitStorePutClient struct {
	grpc.ClientStream
}

func (x *bitStorePutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitStorePutClient) CloseAndRecv() (*PutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bitStoreClient) Get(ctx context.Context, opts ...grpc.CallOption) (BitStore_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BitStore_serviceDesc.Streams[1], c.cc, "/bitstore.BitStore/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &bitStoreGetClient{stream}
	return x, nil
}

type BitStore_GetClient interface {
	Send(*GetRequest) error
	Recv() (*GetResponse2, error)
	grpc.ClientStream
}

type bitStoreGetClient struct {
	grpc.ClientStream
}

func (x *bitStoreGetClient) Send(m *GetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bitStoreGetClient) Recv() (*GetResponse2, error) {
	m := new(GetResponse2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BitStore service-direct

type BitStoreServer interface {
	Put(BitStore_PutServer) error
	Get(BitStore_GetServer) error
}

func RegisterBitStoreServer(s *grpc.Server, srv BitStoreServer) {
	s.RegisterService(&_BitStore_serviceDesc, srv)
}

func _BitStore_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitStoreServer).Put(&bitStorePutServer{stream})
}

type BitStore_PutServer interface {
	SendAndClose(*PutResponse) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type bitStorePutServer struct {
	grpc.ServerStream
}

func (x *bitStorePutServer) SendAndClose(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitStorePutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BitStore_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BitStoreServer).Get(&bitStoreGetServer{stream})
}

type BitStore_GetServer interface {
	Send(*GetResponse2) error
	Recv() (*GetRequest, error)
	grpc.ServerStream
}

type bitStoreGetServer struct {
	grpc.ServerStream
}

func (x *bitStoreGetServer) Send(m *GetResponse2) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bitStoreGetServer) Recv() (*GetRequest, error) {
	m := new(GetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BitStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitstore.BitStore",
	HandlerType: (*BitStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _BitStore_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _BitStore_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dss.proto",
}

func init() { proto.RegisterFile("dss.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x35, 0xdb, 0x65, 0x5d, 0xc7, 0xbd, 0x38, 0xe8, 0x12, 0xf6, 0xb4, 0xe4, 0x62, 0x4f, 0x45,
	0x56, 0x10, 0x84, 0x9e, 0xbc, 0xf4, 0x5a, 0xe2, 0x2f, 0x68, 0xed, 0x54, 0x0b, 0xd2, 0xd4, 0x64,
	0x7a, 0xf4, 0xbf, 0x4b, 0x93, 0xd6, 0x62, 0xc1, 0xcb, 0xde, 0xf2, 0x1e, 0xbc, 0x8f, 0xbc, 0x81,
	0xab, 0xca, 0xb9, 0xa4, 0xb3, 0x86, 0x0d, 0x6e, 0xcb, 0x86, 0x1d, 0x1b, 0x4b, 0x2a, 0x07, 0xc8,
	0x7b, 0xd6, 0xf4, 0xd5, 0x93, 0x63, 0xdc, 0xc3, 0xc6, 0xd4, 0xb5, 0x23, 0x96, 0xe2, 0x28, 0xe2,
	0xb5, 0x1e, 0xd1, 0xc0, 0x7f, 0x52, 0xfb, 0xce, 0x1f, 0x72, 0x15, 0xf8, 0x80, 0x10, 0x61, 0x5d,
	0x15, 0x5c, 0xc8, 0xe8, 0x28, 0xe2, 0x9d, 0xf6, 0x6f, 0x75, 0x0f, 0xd7, 0xde, 0xd1, 0x75, 0xa6,
	0x75, 0x84, 0x12, 0x2e, 0xc9, 0xda, 0x37, 0x53, 0x91, 0xf7, 0xbc, 0xd1, 0x13, 0x54, 0x29, 0x40,
	0x46, 0xe7, 0x46, 0xab, 0x14, 0x76, 0x5e, 0x1d, 0x62, 0x4e, 0xff, 0xe7, 0xfc, 0x96, 0x5c, 0xcd,
	0x25, 0x4f, 0xdf, 0xb0, 0x7d, 0x69, 0xf8, 0x75, 0x98, 0x00, 0x9f, 0x20, 0xca, 0x7b, 0xc6, 0xdb,
	0x64, 0x1a, 0x25, 0x99, 0x17, 0x39, 0xdc, 0x2d, 0xd8, 0x10, 0xa7, 0x2e, 0x62, 0x81, 0xcf, 0x10,
	0x65, 0xf4, 0x47, 0x37, 0x7f, 0xe7, 0xb0, 0x5f, 0xb0, 0x63, 0xcd, 0x41, 0xf8, 0x20, 0xca, 0x8d,
	0x3f, 0xc3, 0xe3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0xa5, 0x76, 0xa5, 0x93, 0x01, 0x00,
	0x00,
}
